package language

import (
	"fmt"
	"sync"
)

/**
 Состояние гонки (Race condition)
 Постоянно встречается в программировании, например в работе с бд, от чего спасают транзакции
 В этом примере, в этом примере мы будем обновлять мапу со счетчиками из разных горутин.
 */
func StartExampleRaceConditions() {
	/**
	map в Go — это конкурентно небезопасный тип данных, то есть обращаясь к нему из разных горутин, которые могут
	выполняться совершенно на разных процессорах, можно как раз словить это состояние гонки. Почему это может произойти?
	Дело в том, что мапа внутри себя — это ссылка на структуру данных, как хеш-таблица. И она может перестраиваться
	и копироваться в другое место, или еще что-то с ней может происходить. При этом в кэше одного процессора может
	лежать одно значение, в кэше другого — другое значение. И когда они попытаются обновить это значение в основной
	памяти, произойдет коллапс.
	 */
	var counters = map[int]int{}
	wg := &sync.WaitGroup{}
	for i := 0; i < 5; i++ {
		wg.Add(1)
		go func(counters map[int]int, th int) {
			defer wg.Done()
			for j := 0; j < 5; j++ {
				counters[th * 10 +j]++ // fatal error, можно отследить если запустить программу с ключём -race
			}
		}(counters, i)
	}
	wg.Wait()
	fmt.Println(counters)
}
