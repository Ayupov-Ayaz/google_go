package language

import (
	"fmt"
	"time"
)

func StartAsyncWork() {
	for i := 0; i < 3; i++  {
		getPage()
	}
}

func getComments() chan string{
	/** создаем буферизированный канал. Буферизация необходима для того, что бы если у нас в главной горутине произойдет
		ошибка и нам нужно будет остановить программу у нас не произошла утечка памяти из-за блокировки горутины которая
		будет ждать пока ее прочитают в заблокированном виде. А если сделать хотя бы с размером буфера 1, то канал у нас
		не заблокируется и в случае ошибки не будет утечки памяти, а если ошибки не произойдет, то сборщик мусора его
		удалит
	*/
	result := make(chan string, 1)
	go func(out chan <- string) {
		// имитируем запрос в базу данных по получению комментарий
 		time.Sleep(2 * time.Second)
		fmt.Println("Комментарии получены")
		out <- "Куча комментарий"
	}(result)
	return result
}

func getPage() {
	// асинхронное получение комментарий
	commentsChanel := getComments()
	// имитируем запрос в базу данных по получению страниц постов
	time.Sleep(1 * time.Second)
	fmt.Println("Посты получены")
 	commentsData := <-commentsChanel
	fmt.Println("Загруженные комментарии: " , commentsData)
}